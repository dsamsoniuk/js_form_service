class AssertAbstract{constructor(e){if(this.message=e,"function"!=typeof this.validate)throw new Error("Class must implement method 'validate'")}getMessage(){return this.message}}class AssertNotBlank extends AssertAbstract{constructor(e){super(e=e??"This field can not be empty")}validate(e){return null!==e&&""!==e&&void 0!==e}}class AssertFileRequired extends AssertAbstract{constructor(e,t,r){super(e=e??"This file is required"),this.messageFormat=t??"Wrong format file",this.allowFormats=r??[]}validate(e){if(e instanceof File==!1)return!1;return!1!=(""!=e.name)&&(!1!=(this.allowFormats==[]||!!this.allowFormats.includes(e.type))||(this.message=this.messageFormat,!1))}}class EventAbstract{constructor(){if("function"!=typeof this.init)throw new Error("Class must implement method 'init'")}}class FormAbstract{}class FieldType{constructor(e){this.constrains=e,this.value=null}}class FormCollection{constructor(e,t=[]){this.data=[],this.className=e,this.constrains=t}createObject(){return new this.className(this.constrains)}}class FormMapper{searchTree(e,t,r=null,s=function(){}){if(e instanceof FieldType)return s(e,r);if(e instanceof FormAbstract)for(let a in e)t[a]&&(r.stepsIndex+=this.buildStepIndex(r.stepsIndex,a),e[a]=this.searchTree(e[a],t[a],r,s));else if(e instanceof FormCollection)for(let a in t)void 0===e.data[a]&&(e.data[a]=e.createObject()),r.stepsIndex+=this.buildStepIndex(r.stepsIndex,a),e.data[a]=this.searchTree(e.data[a],t[a],r,s);return e}setFormData(e,t){for(let r of t.keys()){let s=this.groupToTreeString(r),a={value:t.get(r),fieldName:r,stepsIndex:""};e=this.searchTree(e,s,a,function(e,t){return a.stepsIndex===a.fieldName&&(e.value=t.value,e.fieldName=t.fieldName),e})}return e}groupToTreeString(e){const t={},r=e.replace(/\]/g,"").split("[");let s=t;return r.forEach((e,t)=>{s[e]||(s[e]={}),s=s[e]}),t}buildStepIndex(e,t){return""==e?t:"["+t+"]"}searchBranch(e,t=null,r=function(){}){if(e instanceof FieldType)return r(e,t);if(e instanceof FormAbstract)for(let s in e)e[s]=this.searchBranch(e[s],t,r);else if(e instanceof FormCollection)for(let s in e.data)e.data[s]=this.searchBranch(e.data[s],t,r);return e}}class FormValidator{validate(e){var t={isValid:!0};return(new FormMapper).searchBranch(e,t,this.validateField),t.isValid}validateField(e,t){e.error=[];for(let r in e.constrains){let s=e.constrains[r];s instanceof AssertAbstract!=!1?!1===s.validate(e.value)&&(e.error.push(s.getMessage()),t.isValid=!1):console.warn("ValidatorService: assert w constrains jest niepoprawny, pole: "+e.fieldName)}return e}}class FormErrorAbstract{constructor(){if("function"!=typeof this.clear)throw new Error("Class must implement method 'clear'");if("function"!=typeof this.showErrors)throw new Error("Class must implement method 'showErrors'")}}class FormErrorService extends FormErrorAbstract{clear(e){let t=e.getElementsByClassName("error-field");for(;t.length>0;)t[0].remove()}showErrors(e,t){(new FormMapper).searchBranch(e,{formElement:t},this.showError)}showError(e,t){if(void 0===e.error||null===e.error||0==e.error.length)return e;let r=t.formElement.elements[e.fieldName];var s=document.createElement("div");return s.classList.add("error-field"),s.style="color:red",s.setHTMLUnsafe(e.error.join("<br>")),0==r.parentNode.getElementsByClassName("error-field").length&&r.parentNode.append(s),e}}class TemplateServiceAbstract{constructor(){if("function"!=typeof this.render)throw new Error("Class must implement method 'render'")}}class TemplateService extends TemplateServiceAbstract{search(e){return`{+${e}+}`}replacePlaceholders(e,t){return e.querySelectorAll("*").forEach(e=>{for(const r of e.attributes){const s=r.value;let a=s;for(const[e,r]of Object.entries(t))a=a.replaceAll(this.search(e),r);a!==s&&e.setAttribute(r.name,a)}if(1===e.childNodes.length&&e.childNodes[0].nodeType===Node.TEXT_NODE){let r=e.textContent;for(const[e,s]of Object.entries(t))r=r.replaceAll(this.search(e),s);e.textContent=r}}),e}setPrototype(e){this.template=e.cloneNode(!0),this.template.style="",e.remove()}cloneTemplate(){return this.template.cloneNode(!0)}render(e){return this.replacePlaceholders(this.cloneTemplate(),e)}}